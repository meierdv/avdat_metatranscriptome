#!/bin/bash
#SBATCH --job-name=Trim_and_correct
#SBATCH --cpus-per-task=32
#SBATCH --mem=1000G
#SBATCH --mail-type=ALL
#SBATCH --mail-user=your.email@provider.net
#SBATCH --output=logs/Trim_and_correct.out
#SBATCH --error=logs/Trim_and_correct.err
#SBATCH --nice=1000
#SBATCH --partition=himem

#Defining some variables. DATA_FOLDER should be an absolute path to where the data for the project is stored, with fastq reads being in a subfolder called "reads".

DATA_FOLDER=/scratch/dmeier/Avdat_transcriptomes/
rRNA_databases=/scratch/dmeier/rRNA_databases/


scp $DATA_FOLDER/reads/*.fastq.gz $TMPDIR/
scp $rRNA_databases/*.fasta $TMPDIR/

#creating a sample list if you don't have one
cd $TMPDIR/
ls *read1.fastq.gz | sed 's/raw_reads\///g' | sed 's/_read1.fastq.gz//g' > Sample_list.txt


for SAMPLE in $(cat Sample_list.txt);

do

#running bbduk. Adapter and quality trimming
module unload spades
module load bbmap
    bbduk.sh \
        threads=32 \
        ktrim=r \
        minlength=100 \
        ref=adapters \
        in=$TMPDIR/"$SAMPLE"_read1.fastq.gz \
        in2=$TMPDIR/"$SAMPLE"_read2.fastq.gz \
        out1=$TMPDIR/"$SAMPLE"_read1_trim.fastq \
        out2=$TMPDIR/"$SAMPLE"_read2_trim.fastq

#perform Bayes-Hammmer error-correction of the trimmed reads with SPAdes
module unload bbmap
module load spades

    spades.py \
        --meta \
        --only-error-correction \
        -t 32 \
        -m 512 \
        --tmp-dir /tmp/dmeier/spades \
        -1 $TMPDIR/"$SAMPLE"_read1_trim.fastq \
        -2 $TMPDIR/"$SAMPLE"_read2_trim.fastq \
        -o $TMPDIR/"$SAMPLE"_error_corr

#moving and renaming corrected reads generated by SPAdes. Recommended: first run SPAdes on a tiny read set once to see how the ending of the corrected file names look like
scp $TMPDIR/"$SAMPLE"_error_corr/corrected/"$SAMPLE"_read1.00.0_0.cor.fastq.gz $DATA_FOLDER/reads/"$SAMPLE"_read1.corr.fastq.gz
scp $TMPDIR/"$SAMPLE"_error_corr/corrected/"$SAMPLE"_read2.00.0_0.cor.fastq.gz $DATA_FOLDER/reads/"$SAMPLE"_read2.corr.fastq.gz

#Sequential removal of the rRNA-ressembling reads by mapping to rRNA databases.
#Default identity threshold of bbmap is ~70% (!)

module unload spades
module load bbmap

    #for the SSU it is actually the PhyloFlash database ;P
    bbmap.sh \
        nodisk=T \
        threads=32 \
        ref=$TMPDIR/SILVA_SSU.noLSU.masked.trimmed.fasta \
        in=$TMPDIR/"$SAMPLE"_error_corr/corrected/"$SAMPLE"_read1.00.0_0.cor.fastq.gz \
        in2=$TMPDIR/"$SAMPLE"_error_corr/corrected/"$SAMPLE"_read2.00.0_0.cor.fastq.gz \
        outu=$TMPDIR/"$SAMPLE"_no_SSU_read1.fastq \
        outu2=$TMPDIR/"$SAMPLE"_no_SSU_read2.fastq
    
    bbmap.sh \
        nodisk=T \
        threads=32 \
        ref=$TMPDIR/SILVA_132_LSURef_tax_silva_trunc.fasta \
        in=$TMPDIR/"$SAMPLE"_no_SSU_read1.fastq \
        in2=$TMPDIR/"$SAMPLE"_no_SSU_read2.fastq \
        outu=$TMPDIR/"$SAMPLE"_no_LSU_read1.fastq \
        outu2=$TMPDIR/"$SAMPLE"_no_LSU_read2.fastq

    bbmap.sh \
        nodisk=T \
        threads=32 \
        ref=$TMPDIR/5SrRNAdb.fasta \
        in=$TMPDIR/"$SAMPLE"_no_LSU_read1.fastq \
        in2=$TMPDIR/"$SAMPLE"_no_LSU_read2.fastq \
        outu=$DATA_FOLDER/"$SAMPLE"_no_rRNA_read1.fastq.gz \
        outu2=$DATA_FOLDER/"$SAMPLE"_no_rRNA_read2.fastq.gz
        
        rm -r $TMPDIR/"$SAMPLE"_error_corr
        rm "$SAMPLE"*.fastq*
done

